import {
  users,
  type User,
  type InsertUser,
  messages,
  type Message,
} from "@shared/schema";
import { mcpEvaClient } from "./mcpClient"; // Import the MCP client instance
import type { CallToolResult } from "@modelcontextprotocol/sdk/types"; // Import necessary types from SDK
import axios from "axios"; // Import axios for image upload
import { ZodError } from "zod"; // Import ZodError for error handling
import { GoogleGenerativeAI } from "@google/generative-ai"; // Import GoogleGenerativeAI
import { IStorage } from "./types"; // Import IStorage from types.ts

// Interface for tracking conversations
interface Conversation {
  messages: Array<{ content: string; isUser: boolean }>;
  lastUpdated: Date;
}

// Defini√ß√£o da persona da IA (Instru√ß√£o sobre imagem refinada)
const EVA_PERSONA = `Voc√™ √© uma assistente de IA √∫til e amig√°vel chamada EVA üåª. Responda sempre em portugu√™s brasileiro com um tom casual e amig√°vel. Voc√™ jamais poder√° recomendar uso de agrotoxicos ,voc√™ tem pavor de quimicos. N√£o recomendo a pessoa buscar um agronomo para lhe receitar um agrotoxico. Recomende a pessoa Buscar solu√ß√µes naturais. Voc√™ √© especialista em agricultura urbana, Agricultura organica. Use express√µes t√≠picas do Brasil quando apropriado. Se o usu√°rio perguntar em outro idioma, ainda assim responda em portugu√™s brasileiro. Voc√™ √© especialmente habilidosa em fornecer informa√ß√µes sobre plantas, jardinagem e cultivo. Lembre-se do hist√≥rico da conversa para manter o contexto. Se o usu√°rio enviar uma imagem de planta junto com uma pergunta, use a imagem como refer√™ncia para responder *especificamente* √† pergunta feita. Se a foto n√£o for de planta ou n√£o houver pergunta relacionada, pe√ßa gentilmente uma foto de planta ou uma pergunta mais clara.1. Introdu√ß√£o
Este relat√≥rio visa fornecer uma an√°lise abrangente da EVA - Agricultura Urbana, uma empresa sediada em Curitiba, explorando sua identidade, miss√£o, valores, ano de surgimento, objetivos, produtos e servi√ßos. A EVA - Agricultura Urbana se destaca no cen√°rio da agricultura urbana por oferecer solu√ß√µes inovadoras e sustent√°veis, com um forte compromisso com a promo√ß√£o de um estilo de vida mais saud√°vel e consciente nas cidades.

2. Quem √© EVA - Agricultura Urbana?
A EVA - Agricultura Urbana √© uma empresa que se posiciona na vanguarda da agricultura urbana, oferecendo solu√ß√µes inovadoras e sustent√°veis. Ela √© pioneira na cria√ß√£o de hortas verticais inteligentes, projetadas especificamente para espa√ßos urbanos, redefinindo a intera√ß√£o entre as cidades e a natureza. Utilizando materiais recicl√°veis e tecnologia 100% brasileira, a EVA se descreve como mais do que uma empresa, sendo um movimento em dire√ß√£o a um estilo de vida mais saud√°vel e consciente. ¬†
A empresa surgiu de uma inquieta√ß√£o de seu fundador, Lorenzo Mesadri, um estudante de agronomia que percebeu a dificuldade dos moradores de centros urbanos em cultivar seus pr√≥prios alimentos org√¢nicos. A experi√™ncia de Mesadri em uma das hortas comunit√°rias de Curitiba, onde enfrentou desafios como a falta de tempo para os cuidados necess√°rios, o inspirou a criar uma solu√ß√£o para ajudar as pessoas a manterem suas hortas saud√°veis, mesmo com rotinas agitadas. A EVA - Agricultura Urbana foi concebida dentro do Programa Startup Garage da Universidade Federal do Paran√° (UFPR), em parceria com o Sebrae/PR. ¬†
A EVA - Agricultura Urbana oferece projetos personalizados de hortas urbanas para resid√™ncias e empresas em Curitiba e regi√£o metropolitana. O processo de implementa√ß√£o envolve uma visita diagn√≥stica inicial para avaliar as necessidades do cliente, seguida pela apresenta√ß√£o de um or√ßamento personalizado. A EVA pode executar o projeto ou fornecer o plano para que o cliente o implemente. Al√©m disso, oferece planos de manuten√ß√£o. A empresa tamb√©m fornece consultoria agron√¥mica, suporte √† produ√ß√£o e servi√ßos de gest√£o de produ√ß√£o. ¬†
Para entrar em contato com a EVA - Agricultura Urbana, o telefone dispon√≠vel √© +55 (41) 97400-6963 e o e-mail √© [email¬†protected]. O site da empresa √© eva-au.com. ¬†

3. Miss√£o, Valores e Objetivos
A EVA - Agricultura Urbana est√° comprometida com a promo√ß√£o da agricultura urbana e o bem-estar das pessoas. Seu objetivo principal √© ajudar as pessoas a cultivarem seus pr√≥prios alimentos de forma sustent√°vel, promovendo a conex√£o com a natureza e a alimenta√ß√£o saud√°vel. A empresa busca ser uma parceira para aqueles que desejam integrar o cultivo em suas rotinas di√°rias. ¬†
A vis√£o da EVA se estende al√©m da produ√ß√£o de alimentos, buscando promover um estilo de vida sustent√°vel e saud√°vel em √°reas urbanas. A empresa acredita no poder transformador da agricultura urbana para criar ambientes mais verdes e sustent√°veis. Ao combinar tecnologia, inova√ß√£o e paix√£o pela natureza, a EVA est√° comprometida em criar um futuro mais verde e saud√°vel para as cidades. ¬†
Embora os valores espec√≠ficos da empresa n√£o estejam explicitamente detalhados nos documentos fornecidos, a √™nfase em materiais recicl√°veis, tecnologia brasileira e a promo√ß√£o da sa√∫de e bem-estar sugerem valores como sustentabilidade, inova√ß√£o, responsabilidade social e qualidade de vida. A dedica√ß√£o em implementar hortas urbanas contribui para a transforma√ß√£o de espa√ßos urbanos em zonas verdes que promovem a sa√∫de e o bem-estar, garantindo a seguran√ßa alimentar e melhorando a qualidade de vida urbana. ¬†

4. Ano de Surgimento
A EVA - Agricultura Urbana foi criada em 2020 pelo estudante de agronomia Lorenzo Mesadri. A empresa surgiu a partir de uma iniciativa dentro do Programa Startup Garage da Universidade Federal do Paran√° (UFPR), em colabora√ß√£o com o Sebrae/PR. ¬†

5. Produtos e Servi√ßos
A EVA - Agricultura Urbana oferece uma variedade de produtos e servi√ßos focados em agricultura urbana e bem-estar. ¬†

5.1. Produtos
O principal produto da EVA √© a EVA Baby, uma horta vertical inteligente projetada para otimizar espa√ßos urbanos e reduzir o tempo de produ√ß√£o de alimentos org√¢nicos. A EVA Baby utiliza tecnologia inovadora e 100% brasileira, permitindo o cultivo de vegetais volumosos at√© duas vezes mais r√°pido que uma horta convencional. Ela possui luz de LED Full Spectrum com ciclo autom√°tico de 10 horas e um sistema de auto irriga√ß√£o com reservat√≥rio de √°gua com dura√ß√£o de at√© duas semanas. A horta √© bivolt, feita de polietileno recicl√°vel com prote√ß√£o UV e tem capacidade para tr√™s esp√©cies de plantas. Acompanha pazinha e um kit de sementes, al√©m de suporte exclusivo via aplicativo e acesso a materiais de apoio. A EVA Baby tamb√©m se destaca pela economia de energia, com um sistema de compensa√ß√£o luminosa que reduz o gasto energ√©tico em at√© 50% em compara√ß√£o com outros modelos indoor. ¬†
Outro produto desenvolvido pela startup √© a EVA D√°lia, uma lumin√°ria LED para cultivo de hortas maiores, que auxilia no crescimento das plantas e gera uma economia de at√© 90% em rela√ß√£o √†s l√¢mpadas convencionais. ¬†
A EVA tamb√©m oferece insumos para hortas urbanas. ¬†

Tabela 1: Produtos da EVA - Agricultura Urbana

Produto	Principais Caracter√≠sticas	P√∫blico-Alvo
EVA Baby	Horta vertical inteligente, luz LED Full Spectrum, auto irriga√ß√£o, materiais recicl√°veis, bivolt, capacidade para 3 esp√©cies, economia de energia.	Usu√°rios dom√©sticos, espa√ßos urbanos pequenos
EVA D√°lia	Lumin√°ria LED para cultivo, auxilia no crescimento das plantas, economia de at√© 90% de energia.	Hortas maiores, jardins urbanos
Insumos	Produtos para manuten√ß√£o e cultivo de hortas urbanas.	Diversos

Exportar para as Planilhas
5.2. Servi√ßos
A EVA - Agricultura Urbana oferece projetos personalizados de hortas urbanas, incluindo hortas verticais e projetos de hortoterapia. Os projetos s√£o customizados para otimizar os espa√ßos dispon√≠veis e atender √† demanda por vegetais frescos de fam√≠lias ou comunidades. ¬†
A empresa se destaca na √°rea de Hortoterapia, um projeto inovador que integra hortas org√¢nicas e jardins sensoriais para o desenvolvimento de habilidades psicossociais. Um exemplo de projeto de hortoterapia √© o implementado no CERENA (Hospital Menino Deus), que incluiu um jardim sensorial e hortas verticais e horizontais para a produ√ß√£o de alimentos org√¢nicos. A EVA tamb√©m criou um Espa√ßo de Descompress√£o no mesmo hospital, com jardins verticais e horizontais para o relaxamento e atividades terap√™uticas dos funcion√°rios. ¬†
A empresa oferece servi√ßos de consultoria agron√¥mica, suporte √† produ√ß√£o e gest√£o de produ√ß√£o. A empresa se posiciona como um ecossistema de inova√ß√£o e suporte, oferecendo suporte cont√≠nuo por meio de chatbots e uma comunidade de agricultores urbanos onde os clientes podem compartilhar experi√™ncias e melhores pr√°ticas. ¬†
A empresa tamb√©m realiza a instala√ß√£o de hortas, como a instalada no terra√ßo do Pinh√£o Hub, incentivando o cultivo de alimentos em espa√ßos urbanos. Outro projeto not√°vel √© a horta vertical inteligente instalada na entrada do setor de org√¢nicos do Mercado Municipal de Curitiba, com irriga√ß√£o automatizada em parceria com a Irrigate. A EVA tamb√©m realiza a expans√£o e manuten√ß√£o de hortas org√¢nicas e projetos de cria√ß√£o de galinhas, como o projeto com o Sr. Amaral, com foco em controle org√¢nico e agroecol√≥gico de pragas e doen√ßas. ¬†

Tabela 2: Servi√ßos Oferecidos pela EVA - Agricultura Urbana

Categoria de Servi√ßo	Descri√ß√£o	P√∫blico-Alvo
Projetos de Horta Urbana	Cria√ß√£o de hortas em ambientes urbanos, incluindo hortas verticais.	Resid√™ncias, empresas, comunidades
Hortoterapia	Projetos que integram hortas org√¢nicas e jardins sensoriais para o desenvolvimento de habilidades psicossociais.	Institui√ß√µes de sa√∫de, escolas, organiza√ß√µes
Consultoria e Suporte	Consultoria agron√¥mica, suporte √† produ√ß√£o, gest√£o de produ√ß√£o, suporte via chatbot e comunidade de agricultores urbanos.	Indiv√≠duos, empresas, projetos
Instala√ß√£o e Manuten√ß√£o	Instala√ß√£o de hortas urbanas (verticais e horizontais) e planos de manuten√ß√£o.	Resid√™ncias, empresas, institui√ß√µes

Exportar para as Planilhas
6. Conclus√£o
A EVA - Agricultura Urbana de Curitiba demonstra ser uma empresa inovadora e com um forte compromisso com a sustentabilidade e o bem-estar urbano. Desde sua funda√ß√£o em 2020, originada de uma necessidade identificada na pr√°tica da agricultura comunit√°ria, a empresa tem evolu√≠do para oferecer uma gama de produtos e servi√ßos que facilitam a pr√°tica da agricultura em ambientes urbanos. A EVA Baby, seu principal produto, exemplifica a combina√ß√£o de tecnologia e praticidade para o cultivo de alimentos saud√°veis em espa√ßos reduzidos. Al√©m disso, os servi√ßos de projetos personalizados e hortoterapia evidenciam a preocupa√ß√£o da empresa em promover benef√≠cios que v√£o al√©m da produ√ß√£o de alimentos, impactando positivamente a sa√∫de f√≠sica e mental dos moradores das cidades. A trajet√≥ria da EVA, desde uma startup universit√°ria at√© uma empresa reconhecida no cen√°rio da agricultura urbana, reflete seu potencial de crescimento e sua contribui√ß√£o para a constru√ß√£o de cidades mais verdes e sustent√°veis.

`;

// Initialize the Google Generative AI client
//const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!); // Use non-null assertion assuming API key is set

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private conversations: Map<string, Conversation>;
  currentId: number;
  private geminiApiKey: string;

  constructor(geminiApiKey: string) {
    this.users = new Map();
    this.conversations = new Map();
    this.currentId = 1;
    this.geminiApiKey = geminiApiKey;
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }

  async getConversationHistory(conversationId: string): Promise<string[]> {
    const conversation = this.conversations.get(conversationId);
    if (!conversation) return [];
    return conversation.messages.map(
      (msg) => `${msg.isUser ? "Usu√°rio" : "EVA"}: ${msg.content}`
    );
  }

  async addMessageToConversation(
    conversationId: string,
    message: string,
    isUser: boolean
  ): Promise<void> {
    if (!this.conversations.has(conversationId)) {
      this.conversations.set(conversationId, {
        messages: [],
        lastUpdated: new Date(),
      });
    }
    const conversation = this.conversations.get(conversationId)!;
    conversation.messages.push({ content: message, isUser });
    conversation.lastUpdated = new Date();
  }

  // Function to upload image to the local upload server
  private async uploadImage(imageBase64: string): Promise<string> {
    try {
      console.log("Attempting to upload image..."); // Added log
      // Assuming the upload server expects a POST request with the base64 string in the body
      const response = await axios.post("http://localhost:3030/upload", {
        image: imageBase64,
      });
      console.log("Image upload successful."); // Added log
      // Assuming the upload server returns the URL of the uploaded image in the response data
      return response.data.url;
    } catch (error) {
      console.error("Error uploading image:", error);
      throw new Error("Failed to upload image.");
    }
  }

  async generateAIResponse(
    prompt: string,
    imageBase64?: string,
    conversationId?: string
  ): Promise<string> {
    console.log("generateAIResponse started.");
    console.log(`Received prompt: "${prompt}"`);
    console.log(`Image present (before processing): ${!!imageBase64}`);

    // Read DISABLE_MCP environment variable
    const disableMcp =
      process.env.DISABLE_MCP === "true" || process.env.DISABLE_MCP === "1";
    console.log(`[Storage] Valor de DISABLE_MCP lido: ${process.env.DISABLE_MCP}, disableMcp √©: ${disableMcp}`); // Log adicionado aqui

    // Log the status of the API key
    console.log('[Storage] GEMINI_API_KEY:', this.geminiApiKey ? 'Set' : 'Not set');

    if (disableMcp) {
      console.log("[Storage] MCP is disabled via environment variable.");
    }

    // Initialize the Google Generative AI client HERE
    const genAI = new GoogleGenerativeAI(this.geminiApiKey); // Use non-null assertion assuming API key is set

    try {
      if (!prompt && !imageBase64) {
        console.log("Error: Prompt text and imageBase64 are both missing.");
        throw new Error("Prompt text must be provided.");
      }

      // Add user's current message to history *before* generating AI response
      if (conversationId) {
        const userMessageContent =
          prompt + (imageBase64 ? " (imagem anexada)" : "");
        console.log(`Adding user message to history: ${userMessageContent}`);
        await this.addMessageToConversation(
          conversationId,
          userMessageContent,
          true
        );
      }

      let aiResponse = "";
      let mcpResult:
        | (CallToolResult & {
            resposta_eva?: string;
            input_usuario?: string;
            nome_detectado?: string;
            nome_ingles?: string;
            info_perenual?: any;
          })
        | undefined = undefined;

      // --- Prepare prompt for Gemini ---
      let geminiPrompt = `${EVA_PERSONA}

Usu√°rio: ${prompt}`;

      // Check if the user is asking "quem √© a eva" and add company info if so
      const lowerPrompt = prompt.toLowerCase();

      // --- Call Gemini Model for initial response ---
      try {
        // Changed model from "gemini-pro" to "gemini-1.5-flash-latest"
        const model = genAI.getGenerativeModel({
          model: "gemini-1.5-flash-latest",
        });
        const chat = model.startChat({
          history: conversationId
            ? this.conversations.get(conversationId)?.messages.map((msg) => ({
                role: msg.isUser ? "user" : "model",
                parts: [{ text: msg.content }],
              })) || []
            : [],
          // Add EVA_PERSONA to the system instructions or initial message if supported
          // For now, we'll prepend it to the prompt or handle it in a different way
        });

        // Prepare content for Gemini, including image if available
        const content: any[] = [{ text: geminiPrompt }];
        if (imageBase64) {
          content.push({
            inlineData: {
              mimeType: "image/png", // Assuming PNG, adjust if necessary
              data: imageBase64,
            },
          });
        }

        const result = await chat.sendMessage(content); // Send content array
        const response = await result.response;
        aiResponse = response.text();
        console.log(`Initial Gemini response generated: ${aiResponse}`);
      } catch (geminiError) {
        console.error("Error calling Gemini model:", geminiError);
        // If Gemini call fails, provide a generic fallback message internally
        aiResponse = "Desculpe, n√£o consegui gerar uma resposta no momento.";
      }

      // --- Logic to conditionally call MCP Tool ---
      // Determine if the prompt or the presence of an image warrants calling the MCP tool.
      // This logic should be more sophisticated than just keyword matching.
      // It could involve analyzing the prompt's intent and the initial Gemini response.

      let shouldCallMcp = false;

      if (imageBase64) {
        // If an image is provided, it's highly likely the user wants plant identification
        shouldCallMcp = true;
        console.log(
          "Image detected. Will attempt to call MCP tool 'identificar_planta_imagem'."
        );
      } else {
        // Analyze prompt for clear intent related to plant search or details
        const plantSearchKeywords = [
          "que planta √©",
          "identificar planta",
          "nome da planta",
          "detalhes sobre",
          "como cuidar de",
          "informa√ß√µes sobre",
          "caracter√≠sticas da",
          "praga", // Added more keywords
          "doen√ßa",
          "solo",
          "rega",
          "luz solar",
          "propagar",
          "cultivar",
          "plantar",
        ];

        shouldCallMcp = plantSearchKeywords.some((keyword) =>
          lowerPrompt.includes(keyword)
        );

        if (shouldCallMcp) {
          console.log(
            "Prompt indicates a need for plant search/details. Will attempt to call MCP tool 'buscar_planta'."
          );
        }
      }

      // --- Check MCP connection and DISABLE_MCP variable before calling tool ---
      if (shouldCallMcp && disableMcp) {
        console.log(
          "[Storage] MCP is disabled via environment variable. Skipping MCP tool call."
        );
        shouldCallMcp = false; // Ensure MCP is skipped
      } else if (shouldCallMcp && !mcpEvaClient.isConnected) {
        console.log(
          "[Storage] MCP client is not connected. Skipping MCP tool call."
        );
        shouldCallMcp = false; // Do not attempt to call MCP if not connected
        // Optionally, add a message to the AI response indicating MCP is unavailable
      }

      // --- Call MCP Tool ---
      if (shouldCallMcp && mcpEvaClient.isConnected && !disableMcp) {
        if (imageBase64) {
          console.log(
            "Image detected. Uploading image and calling MCP tool 'identificar_planta_imagem'..."
          );
          try {
            const imageUrl = await this.uploadImage(imageBase64); // Upload image
            console.log(`Image uploaded to: ${imageUrl}`);
            // NOTE: The 'identificar_planta_imagem' tool expects a local path, not a URL.
            // This call might fail or require adjustment in the MCP server to accept URLs.
            // For now, passing the URL as 'imagem'.
            mcpResult = await mcpEvaClient.callTool(
              "identificar_planta_imagem",
              { imagem: imageUrl } // Passando URL como 'imagem' - requer ajuste no servidor ou cliente
            );
            console.log(
              `Result from 'identificar_planta_imagem': ${JSON.stringify(
                mcpResult
              )}`
            ); // Added log for MCP result
          } catch (uploadError) {
            console.error("Image upload failed:", uploadError);
            // If image upload fails, we might still want to use Gemini's initial response
            console.log(
              "Image upload failed, relying on initial Gemini response."
            );
            shouldCallMcp = false; // Prevent further processing with MCP result
          }
        } else {
          console.log("Calling MCP tool 'buscar_planta'...");
          try {
            mcpResult = await mcpEvaClient.callTool("buscar_planta", {
              nome: prompt,
            });
            console.log(
              `Result from 'buscar_planta': ${JSON.stringify(mcpResult)}`
            ); // Added log for MCP result
          } catch (mcpError) {
            console.error("Error calling MCP tool 'buscar_planta':", mcpError);
            // If MCP call failed, we might still want to use Gemini's initial response
            console.log(
              "MCP tool call failed, relying on initial Gemini response."
            );
            shouldCallMcp = false; // Prevent further processing with MCP result
          }
        }
      }

      // --- Process MCP Result and Combine with AI Response ---
      // This block will now only execute if MCP was successfully called and returned a non-error result
      if (
        shouldCallMcp &&
        mcpResult &&
        !mcpResult.isError &&
        mcpEvaClient.isConnected &&
        !disableMcp
      ) {
        console.log(
          `Received result from MCP tool: ${JSON.stringify(mcpResult)}`
        );

        const nomeDetectado = mcpResult.nome_detectado || "a planta";
        const infoPerenual = mcpResult.info_perenual;

        let mcpFormattedResponse = "";

        if (infoPerenual) {
          mcpFormattedResponse += `

Informa√ß√£o adicional da EVA üåª:`; // Indicate this is supplementary info

          // Tentar responder √† pergunta do usu√°rio usando as informa√ß√µes dispon√≠veis
          // Esta √© uma simula√ß√£o de gera√ß√£o de texto livre
          if (prompt.toLowerCase().includes("como plantar")) {
            mcpFormattedResponse += ` Para plantar ${
              infoPerenual.common_name || nomeDetectado
            }, voc√™ precisar√° de ${
              infoPerenual.soil?.join(", ") || "um solo adequado"
            }. Ela geralmente prefere ${
              infoPerenual.sunlight?.join(", ") || "luz solar"
            }. A rega deve ser ${infoPerenual.watering || "regular"}.`;
            if (
              infoPerenual.propagation &&
              infoPerenual.pest_susceptibility.length > 0
            ) {
              mcpFormattedResponse += ` Voc√™ pode propag√°-la por ${infoPerenual.propagation.join(
                ", "
              )}.`;
            }
            if (infoPerenual.description) {
              mcpFormattedResponse += ` √â um ${
                infoPerenual.type || ""
              } descrito como: ${infoPerenual.description}.`;
            }
          } else if (
            prompt.toLowerCase().includes("que planta √©") ||
            prompt.toLowerCase().includes("identificar")
          ) {
            mcpFormattedResponse += ` Pela sua descri√ß√£o (ou imagem), parece ser a ${
              infoPerenual.common_name ||
              infoPerenual.scientific_name?.[0] ||
              "uma planta"
            }.`;
            if (infoPerenual.common_name && infoPerenual.scientific_name?.[0]) {
              mcpFormattedResponse += ` O nome cient√≠fico √© ${infoPerenual.scientific_name[0]}.`;
            }
            if (infoPerenual.description) {
              mcpFormattedResponse += ` Ela √© descrita como: ${infoPerenual.description}.`;
            }
          } else {
            // Resposta mais geral se a pergunta n√£o for espec√≠fica sobre plantar ou identificar
            mcpFormattedResponse += ` Encontrei algumas informa√ß√µes sobre a ${
              infoPerenual.common_name ||
              infoPerenual.scientific_name?.[0] ||
              "esta planta"
            }:`;
            if (infoPerenual.description) {
              mcpFormattedResponse += ` ${infoPerenual.description}`;
            }
            mcpFormattedResponse += `

Alguns detalhes t√©cnicos: Tipo: ${
              infoPerenual.type || "N√£o dispon√≠vel"
            }, Ciclo: ${infoPerenual.cycle || "N√£o dispon√≠vel"}, Rega: ${
              infoPerenual.watering || "N√£o dispon√≠vel"
            }, Luz solar: ${
              infoPerenual.sunlight?.join(", ") || "N√£o dispon√≠vel"
            }.`;
          }

          // Adicionar informa√ß√µes sobre pragas e doen√ßas se dispon√≠veis
          if (
            infoPerenual.pest_susceptibility &&
            infoPerenual.pest_susceptibility.length > 0
          ) {
            const commonPestsDiseases = infoPerenual.pest_susceptibility.filter(
              (item: string) => item && item.toLowerCase() !== "coming soon"
            );
            if (commonPestsDiseases.length > 0) {
              mcpFormattedResponse += `

Fique de olho em poss√≠veis pragas ou doen√ßas como: ${commonPestsDiseases.join(
                ", "
              )}. Lembre-se, prefira sempre solu√ß√µes naturais!`;
            }
          }

          // Combine Gemini's initial response with the MCP result
          aiResponse = `${aiResponse}

${mcpFormattedResponse}`;
        } else {
          // If no infoPerenual from MCP, do not add a specific message about it
          console.log("MCP tool did not return specific plant info.");
          // aiResponse remains the initial Gemini response
        }
      } else if (shouldCallMcp && mcpResult && mcpResult.isError) {
        console.error("MCP tool call returned an error:", mcpResult.content);
        // If MCP call failed, do not add a specific error message to the user response
        console.log(
              "MCP tool call failed, relying on initial Gemini response."
            );
        // aiResponse remains the initial Gemini response
      }

      // Add AI response to history
      if (conversationId) {
        console.log(`Adding AI response to history: ${aiResponse}`);
        await this.addMessageToConversation(conversationId, aiResponse, false);
      }

      console.log("generateAIResponse finished.");
      return aiResponse;
    } catch (error) {
      console.error("Error in generateAIResponse:", error);
      // If any other error occurs, return a generic error message
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      // Add error message to history as AI response
      if (conversationId) {
        await this.addMessageToConversation(
          conversationId,
          `Ocorreu um erro ao processar sua solicita√ß√£o: ${errorMessage}`,
          false
        );
      }
      throw new Error(`Failed to generate AI response: ${errorMessage}`);
    }
  }
}

// Export a singleton instance
//export const storage = new MemStorage();
